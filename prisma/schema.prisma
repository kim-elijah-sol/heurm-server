generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  password       String
  timezone       String
  timezoneOffset Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  profileImage   String?

  challenges     Challenge[]
}

model Challenge {
  id          String   @id @default(cuid())
  title       String
  color       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  items       ChallengeItem[]
}

model ChallengeItem {
  id               String   @id @default(cuid())
  name             String

  type             ChallengeItemType

  intervalType     ChallengeItemIntervalType

  dailyType        ChallengeItemDailyRepeatType?
  dailyInterval    Int?
  dailyRest        Int?
  daliyAnyInterval Int?

  weeklyType       ChallengeItemNotDailyRepeatType?
  weeklyInterval   Int?
  weeklyRest       Int?
  days             String[] @default([])

  monthlyType      ChallengeItemNotDailyRepeatType?
  monthlyInterval  Int?
  monthlyRest      Int?
  dates            Int[]    @default([])
  weeks            Int[]    @default([])

  yearlyType       ChallengeItemNotDailyRepeatType?
  yearlyInterval   Int?
  yearlyRest       Int?
  months           String[] @default([])

  targetCount      Int?
  unit             String?
  accumulateType   ChallengeItemIntervalType?

  startAt          DateTime @default(now())
  endAt            DateTime?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  challengeId      String
  challenge        Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  history          ChallengeItemHistory[]
}

enum ChallengeItemType {
  COMPLETE
  OVER
  UNDER
}

enum ChallengeItemIntervalType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ChallengeItemDailyRepeatType {
  EVERY
  N
  NM
  ANY_N
}

enum ChallengeItemNotDailyRepeatType {
  EVERY
  N
  NM
}

model ChallengeItemHistory {
  id              String   @id @default(cuid())
  date            DateTime
  complete        Boolean?
  count           Int?
  targetCount     Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  challengeItemId String
  challengeItem   ChallengeItem @relation(fields: [challengeItemId], references: [id], onDelete: Cascade)

  @@unique([challengeItemId, date])
}