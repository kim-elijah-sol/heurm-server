generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  password       String
  timezone       String
  timezoneOffset Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  profileImage   String?

  flows          Flow[]
  waves          Wave[]
  refreshToken   RefreshToken[]
}

model RefreshToken {
  refreshToken   String   @db.VarChar(250) @unique
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
}

model Flow {
  id               String   @id @default(cuid())
  name             String
  color            String

  type             FlowType

  intervalType     FlowIntervalType

  repeatType       FlowRepeatType
  repeat           Int?
  rest             Int?

  // only weekly interval
  days             Int[] @default([])
  // only monthly interval
  dates            Int[] @default([])
  weeks            Int[] @default([])
  // only yearly interval
  months           Int[] @default([])

  targetCount      Int?
  unit             String?
  accumulateType   FlowIntervalType?

  startAt          DateTime @default(now())
  endAt            DateTime?

  startTime        Int?
  endTime          Int?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userId           String
  user             User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  history          FlowHistory[]
  wave             FlowWave[]
}

enum FlowType {
  COMPLETE
  OVER
  UNDER
}

enum FlowIntervalType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum FlowRepeatType {
  EVERY
  N
  NM
}

model FlowHistory {
  id              String   @id @default(cuid())
  date            DateTime
  complete        Boolean?
  count           Int?
  type            FlowType
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  flowId          String
  flow            Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@unique([flowId, date, type])
}

model Wave {
  id        String     @id @default(cuid())
  userId    String
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  order     Int?    

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  flow      FlowWave[]
}

model FlowWave {
  flowId  String
  waveId  String
  flow    Flow    @relation(fields: [flowId], references: [id], onDelete: Cascade)
  wave    Wave    @relation(fields: [waveId], references: [id], onDelete: Cascade)

  @@unique([flowId, waveId])
}